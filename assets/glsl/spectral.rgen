#version 460
#extension GL_EXT_ray_tracing : require

#include "payload.glsl"
#include "sampling.glsl"
#include "postprocess.glsl"
#include "spectral.glsl"

const bool DO_ACCUMULATION = true;
layout(push_constant) uniform PushConstant {
	int accum_start_frame;
} push;

layout(set = 0, binding = 0) uniform Scene {
    mat4 model;
    mat4 view;
    mat4 view_inverse;
    mat4 projection;
    mat4 projection_inverse;
    mat4 model_view_projection;
    uvec3 frame;
} scene;
layout(set = 1, binding = 0) uniform accelerationStructureEXT topLevelAS;
layout(set = 1, binding = 1, rgba32f) uniform image2D accumImage;
layout(set = 1, binding = 2, rgba8) uniform image2D renderImage;

layout(location = 0) rayPayloadEXT SpectralPayload prd;

void prepareSpectralPayload( inout SpectralPayload prd, vec3 origin, vec3 direction, float wavelength )
{
	prd.hitValue    = 0;
	prd.depth       = 0;
	prd.done        = 0;
	prd.rayOrigin   = origin;
	prd.rayDir      = direction;
	prd.rayRange    = vec2(max(1.0f, length(origin.xyz)) * 1e-3f, 10000.0f);
	prd.wavelength  = wavelength;
}

void getWavelengthSamples(float lowestWavelength, float highestWavelength, out float samples[SAMPLE_COUNT])
{
    // float interval_size = (highestWavelength - lowestWavelength) / float(SAMPLE_COUNT);

    // for(int i = 0; i < SAMPLE_COUNT; ++i)
    // {
    //     float mid_wavelength = lowestWavelength + float(i) * interval_size;
    //     samples[i] = mid_wavelength;
    // }
	samples = float[](
		381.0,
		407.0,
		433.0,
		460.0,
		487.0,
		513.0,
		540.0,
		567.0,
		593.0,
		620.0,
		647.0,
		673.0,
		700.0,
		727.0,
		753.0,
		779.0
	);
}

void prepareOutput(out float arr[SAMPLE_COUNT])
{
    for (int i = 0; i < SAMPLE_COUNT; i++) {
        arr[i] = 0.0;
    }
}

vec3 spectrumToCIExyz(float arr[SAMPLE_COUNT]) {
    vec3 sum = vec3(0.0);
    for (int i = 0; i < SAMPLE_COUNT; i++) {
        sum += arr[i] * cieXYZ[i] / float(SAMPLE_COUNT); // cieXYZ is the table of corresponding size
    }
    return sum;
}


void main() 
{
	uint rayFlags   = gl_RayFlagsOpaqueEXT;
	float tmin      = 0.001f;
	int maxBounces  = 16;

	prd.rng = tea( gl_LaunchIDEXT.x + gl_LaunchIDEXT.y * gl_LaunchSizeEXT.x, scene.frame.z );
	
    float w_samples[SAMPLE_COUNT];
    float spectralRadiance[SAMPLE_COUNT];
    getWavelengthSamples(380.0, 780.0, w_samples);
    prepareOutput(spectralRadiance);

	vec3 pixel = vec3(0.0);

	for( int i=0; i<SAMPLE_COUNT; i++ ) {
    	// Subpixel jitter: send the ray through a different position inside the pixel
    	// each time, to provide antialiasing.
		const vec2 pixelCenter = vec2(gl_LaunchIDEXT.xy) + vec2(nextRand(prd.rng), nextRand(prd.rng));
    	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
    	vec2 d = inUV * 2.0 - 1.0;
		vec4 origin = scene.view_inverse * vec4(0,0,0,1);
		//float tmin = max(1.0f, length(origin.xyz)) * 1e-3f;
		vec4 target = scene.projection_inverse * vec4(d.x, d.y, 1, 1);
		vec4 direction = scene.view_inverse * vec4(normalize(target.xyz), 0);

		prepareSpectralPayload( prd, origin.xyz, direction.xyz, w_samples[i]);
		prd.sampleId = i;

		float wavelength_contribution = 1.0;
		for(;;) {
			traceRayEXT(topLevelAS, // acceleration structure
				rayFlags,       // rayFlags
				0xFF,           // cullMask
				0,              // sbtRecordOffset
				0,              // sbtRecordStride
				0,              // missIndex
				prd.rayOrigin,  // ray origin
				prd.rayRange.x, // ray min range
				prd.rayDir,     // ray direction
				prd.rayRange.y, // ray max range
				0               // payload (location = 0)
			);
			wavelength_contribution *= prd.hitValue;
			if( prd.done == 1 ) {
				break;
			}
			if( prd.depth > maxBounces ) {
				wavelength_contribution = 0.0;
				break;
			}
		}
		// spectralRadiance[i] += wavelength_contribution;
		pixel += cieXYZNorm[i] * wavelength_contribution;
	}

    // vec3 xyz_color = spectrumToCIExyz(spectralRadiance);
    // vec3 pixelColor = xyzTolRGB(pixelXYZ);
	vec3 pixelColor = pixel;
	// pixelColor = clamp(pixelColor, 0.0, 1.0);
	// pixelColor = gammaCorrect(pixelColor, 2.2);

	if( DO_ACCUMULATION ) {
    	float alpha    = 1.0f / float(scene.frame.z + 1 - push.accum_start_frame);
    	vec3  oldColor = imageLoad(accumImage, ivec2(gl_LaunchIDEXT.xy)).xyz;
		pixelColor     = mix(oldColor, pixelColor, alpha);
		// Replace NaN components with zero to prevent black 
    	if(any(isnan(pixelColor))){
			pixelColor = oldColor;
		}
		if(any(isinf(pixelColor))){
			pixelColor = oldColor;
		}
		imageStore(accumImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 1.0f));
	}
	// pixelColor = t_xyzWideGammutRGB * pixelColor;
	// pixelColor = Tonemap_ACESFitted2(pixelColor);
    // pixelColor = Tonemap_ACESFitted(pixelColor);
    // pixelColor = RRTAndODTFit(pixelColor);
    // gamma correct the converted xyz to rgb
	// pixelColor = gammaCorrect(pixelColor, 2.2);
	 // pixelColor = ACESFilm(pixelColor); //gammaCorrect(pixelColor, 2.2);
	imageStore(renderImage, ivec2(gl_LaunchIDEXT.xy), vec4(pixelColor, 1.0f));
}
